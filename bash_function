#!/bin/bash

DEBUG=0
########### Display color
RESULT_RED="tput setaf 1"
RESULT_GREEN="tput setaf 2"
RESULT_YELLOW="tput setaf 3"
RESULT_BLUE="tput setaf 4"
RESULT_CYAN="tput setaf 6"
RESULT_LIGHT_BLUE="$CYAN"
RESULT_BOLD="tput bold"
RESULT_DEFAULT="tput sgr0"
########### Display color END

#######################################
# progress bar
#
# Arguments:
#   excuted commands
# Returns:
#   progressing commands 
# Example:
#   progress_bar "command 1" "command 2" "command 3"
#######################################


function progress_bar() {

FOOTER_LINES=1
TERM_HEIGHT=$(tput lines)
SCROLL_START_LINE=$((FOOTER_LINES + 1))
SCROLL_END_LINE=$((TERM_HEIGHT))
FOOTER_START_INDEX=$((TERM_HEIGHT))

  local CMDS=("${@}")
  local MAX_STEPS=$#
  local BAR_SIZE="##############################"
  local MAX_BAR_SIZE="${#BAR_SIZE}"
  local CLEAR_LINE="\\033[K"
  tput clear

  tput civis -- invisible

  tput cup 0 0
  tput el
  echo -ne "\\r[${BAR_SIZE:0:percBar}] $perc %$CLEAR_LINE"
  for step in "${!CMDS[@]}"; do
    perc=$((step * 100 / MAX_STEPS))
    percBar=$((perc * MAX_BAR_SIZE / 100))
    ${CMDS[$step]}
    tput sc
    tput cup 0 0
    tput el

    perc=$(((step + 1) * 100 / MAX_STEPS))
    percBar=$((perc * MAX_BAR_SIZE / 100))
    echo -ne "\\r[${BAR_SIZE:0:percBar}] $perc %$CLEAR_LINE"
    sleep 0.1
    tput rc
  done

  tput cnorm -- normal
  tput el
}

#######################################
# check current date
#
# Arguments:
#   excuted command
# Returns:
#   current date
# Example:
#   now_date
#######################################
function now_date() {
  date +%Y-%m-%d
}

#######################################
# check current time
#
# Arguments:
#   excuted command
# Returns:
#   current time
# Example:
#   now_time
#######################################
function now_time() {
  date +%H:%M:%S
}

#######################################
# pkg management check
#
# Arguments:
#   excuted command
# Returns:
#   pkg management command
# Example:
#   pkg_check
#######################################
function pkg_check() {
  rpm_path=$(type -p rpm)
	dpkg_path=$(type -p dpkg)

	if [ -e "$rpm_path" ]
	then
		echo "rpm"
	elif [ -e "$dpkg_path" ]
	then
		echo "dpkg"
	else
		cmd::msg_alert "Con't find package"
	fi
}

#######################################
# ip grep
#
# Arguments:
#   excuted command
# Returns:
#   ip address 
# Example:
#   ip_grep "$(ifconfig)"
#######################################
function ip_grep() {
   echo "$@" |  grep -E -o "(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])"
}

#######################################
# ip format check
#
# Arguments:
#   excuted command
# Returns:
#   0(is ip) or 1(is not ip)
# Example:
#  if ip_check 255.255.255.0;  then echo "is ip"; fi 
#######################################
function ip_check() {
  if echo "$1" |  grep -E -o "(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$"; then
    return 0 
  else
    return 1
  fi
}

#######################################
# Exception Check for Every command
#
# Arguments:
#   excuted command
# Returns:
#   None or exit 1
# Example:
#   cd ..
#   check_exception
#######################################
function exception_check () {
# shellcheck disable=SC2181
  if [ "$?" -eq 0 ]; then
    if [[ $DEBUG -eq "0" ]]; then
      echo "done" >/dev/null
    else
      cmd::msg_ok "Exception Check ok"
    fi
  else
    cmd::msg_error "Exception Check Fail. Above task return code [ $? ]"
    exit 1
  fi
}

#######################################
# Self Update function
#   Download Program from git repository and check hash result then change file
#
# Arguments:
#   $1 check process name
#   $2 Original program path
#   $3 DownLoad URL
# Returns:
#   None
#
#######################################
function self_update () {
  local SELF_UPDATE_PATH="/tmp/self_update"
  local ORIGNAL_PROGRAM_PATH=$2
  local DOWNLOAD_URL=$3
  if [[ "$(pgrep -f "$1" | wc -l)" -eq 0 ]]; then
    curl -w ' [:: %{size_download} byte has been downloaded ::]\n' -L -# "$DOWNLOAD_URL"?"$(date +%s)" -o $SELF_UPDATE_PATH
    check_exception
    if [ "$(md5sum $SELF_UPDATE_PATH | awk '{print $1}')" != "$(md5sum "$ORIGNAL_PROGRAM_PATH" | awk '{print $1}')" ]; then
      chmod +x $SELF_UPDATE_PATH
      check_exception
      mv -f $SELF_UPDATE_PATH "$ORIGNAL_PROGRAM_PATH"
      check_exception
      cmd::msg_success "update done"
    else
      rm -rf $SELF_UPDATE_PATH
      check_exception
      cmd::msg_info "$1 already up to date"
    fi
  else
    cmd::msg_info "$1 runnig"
  fi
}

function cmd::defined() {
  [[ ${!1-X} == "${!1-Y}" ]]
}

function cmd::has_value() {
  if cmd::defined "$1"; then
    if [[ -n ${!1} ]]; then
      return 0
    fi
  fi
  return 1
}

function cmd::msg() {
  local MESSAGE="$1"
  local COLOR="$2"

  if ! cmd::has_value COLOR; then
    COLOR="$RESULT_DEFAULT"
  fi

  if cmd::has_value "MESSAGE"; then
    $COLOR
    echo "$MESSAGE"
    $RESULT_DEFAULT
  else
    echo "-- no message received --"
  fi
}

function cmd::msg_status() {
  local MESSAGE="$1"
  local STATUS="$2"

  cmd::msg "$MESSAGE"
  cmd::display_status "$STATUS"
}

function cmd::display_status() {
  local STATUS="$1"

  case $STATUS in
    EMERGENCY)
      STATUS="EMERGENCY"
      COLOR="$RESULT_RED"
      ;;
    ALERT)
      STATUS="  ALERT  "
      COLOR="$RESULT_RED"
      ;;
    CRITICAL)
      STATUS="CRITICAL "
      COLOR="$RESULT_RED"
      ;;
    ERROR)
      STATUS="  ERROR  "
      COLOR="$RESULT_RED"
      ;;
    WARNING)
      STATUS=" WARNING "
      COLOR="$RESULT_YELLOW"
      ;;
    NOTICE)
      STATUS=" NOTICE  "
      COLOR="$RESULT_BLUE"
      ;;
    INFO)
      STATUS="  INFO   "
      COLOR="$RESULT_LIGHT_BLUE"
      ;;
    DEBUG)
      STATUS="  DEBUG  "
      COLOR="$RESULT_DEFAULT"
      ;;
    OK)
      STATUS="   OK    "
      COLOR="$RESULT_GREEN"
      ;;
    NOT_OK)
      STATUS=" NOT OK  "
      COLOR="$RESULT_RED"
      ;;
    PASSED)
      STATUS=" PASSED  "
      COLOR="$RESULT_GREEN"
      ;;
    SUCCESS)
      STATUS=" SUCCESS "
      COLOR="$RESULT_GREEN"
      ;;
    FAILURE | FAILED)
      STATUS=" FAILED  "
      COLOR="$RESULT_RED"
      ;;
    *)
      STATUS="UNDEFINED"
      COLOR="$RESULT_YELLOW"
      ;;
  esac

  cmd::raw_status "$STATUS" "$COLOR"
}

function cmd::msg_emergency() {
  local MESSAGE="$1"
  local STATUS="EMERGENCY"
  cmd::msg_status "$MESSAGE" "$STATUS"
}

function cmd::msg_alert() {
  local MESSAGE="$1"
  local STATUS="ALERT"
  cmd::msg_status "$MESSAGE" "$STATUS"
}

function cmd::msg_critical() {
  local MESSAGE="$1"
  local STATUS="CRITICAL"
  cmd::msg_status "$MESSAGE" "$STATUS"
}

function cmd::msg_error() {
  local MESSAGE="$1"
  local STATUS="ERROR"
  cmd::msg_status "$MESSAGE" "$STATUS"
}

function cmd::msg_warning() {
  local MESSAGE="$1"
  local STATUS="WARNING"
  cmd::msg_status "$MESSAGE" "$STATUS"
}

function cmd::msg_notice() {
  local MESSAGE="$1"
  local STATUS="NOTICE"
  cmd::msg_status "$MESSAGE" "$STATUS"
}

function cmd::msg_info() {
  local MESSAGE="$1"
  local STATUS="INFO"
  cmd::msg_status "$MESSAGE" "$STATUS"
}

function cmd::msg_debug() {
  local MESSAGE="$1"
  local STATUS="DEBUG"
  cmd::msg_status "$MESSAGE" "$STATUS"
}

function cmd::msg_ok() {
  local MESSAGE="$1"
  local STATUS="OK"
  cmd::msg_status "$MESSAGE" "$STATUS"
}

function cmd::msg_not_ok() {
  local MESSAGE="$1"
  local STATUS="NOT_OK"
  cmd::msg_status "$MESSAGE" "$STATUS"
}

function cmd::msg_fail() {
  local MESSAGE="$1"
  local STATUS="FAILED"
  cmd::msg_status "$MESSAGE" "$STATUS"
}

function cmd::msg_success() {
  local MESSAGE="$1"
  local STATUS="SUCCESS"
  cmd::msg_status "$MESSAGE" "$STATUS"
}

function cmd::msg_passed() {
  local MESSAGE="$1"
  local STATUS="PASSED"
  cmd::msg_status "$MESSAGE" "$STATUS"
}

function cmd() {
  local COMMAND=("$@")
  cmd::msg "Executing: $*"

  RESULT=$("${COMMAND[@]}" 2>&1)
  local ERROR="$?"
  local MSG="[COMMAND]  $*"

  tput cuu1

  if [ "$ERROR" == "0" ]; then
    cmd::msg_ok "$MSG"
    if [ "$DEBUG" == "1" ]; then
      cmd::msg "$RESULT"
    fi
  else
    cmd::msg_fail "$MSG"
  fi

  return "$ERROR"
}

function cmd:position_cursor() {
  let RES_COL="$(tput cols)-12"
  tput cuf "$RES_COL"
  tput cuu1
}

function cmd::raw_status() {
  STATUS="$1"
  COLOR="$2"
  cmd:position_cursor
  echo -n "["
  $RESULT_DEFAULT
  $BOLD
  $COLOR
  echo -n "$STATUS"
  $RESULT_DEFAULT
  echo "]"
}
