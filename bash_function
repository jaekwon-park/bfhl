#!/bin/bash

DEBUG=0
########### Display color
RED="tput setaf 1"
GREEN="tput setaf 2"
YELLOW="tput setaf 3"
BLUE="tput setaf 4"
MAGENTA="tput setaf 5"
CYAN="tput setaf 6"
LIGHT_BLUE="$CYAN"
BOLD="tput bold"
DEFAULT="tput sgr0"
RED_BG="tput setab 1"
GREEN_BG="tput setab 2"
YELLOW_BG="tput setab 3"
BLUE_BG="tput setab 4"
MAGENTA_BG="tput setab 5"
CYAN_BG="tput setab 6"
########### Display color END


#######################################
# Exception Check for Every command
#
# Arguments:
#   excuted command
# Returns:
#   None or exit 1
# Example:
#   cd ..
#   check_exception
#######################################
function check_exception() {
  if [ "$?" -eq 0 ]; then
    if [[ $DEBUG -eq "0" ]]; then
      echo "done" > /dev/null
    else
      echo "done"
    fi
  else
    echo "above task return code "$?
    echo "something wrong"
    exit 1
  fi
}




#######################################
# Self Update function
#   Download Program from git repository and check hash result then change file
#
# Arguments:
#   $1 check process name
#   $2 Original program path
#   $3 DownLoad URL
# Returns:
#   None
#
#######################################
function update_self() {
  local SELF_UPDATE_PATH="/tmp/self_update"
  local ORIGNAL_PROGRAM_PATH=$2
  local DOWNLOAD_URL=$3
  if [[ "$(pgrep -f "$1" | wc -l)" -eq 0 ]]; then
    curl -w ' [:: %{size_download} byte has been downloaded ::]\n' -L -# "$DOWNLOAD_URL"?"$(date +%s)" -o $SELF_UPDATE_PATH
    check_exception
    if [ "$(md5sum $SELF_UPDATE_PATH | awk '{print $1}')" != "$(md5sum "$ORIGNAL_PROGRAM_PATH" | awk '{print $1}')" ]; then
      chmod +x $SELF_UPDATE_PATH
      check_exception
      mv -f $SELF_UPDATE_PATH "$ORIGNAL_PROGRAM_PATH"
      check_exception
      echo "update done"
    else
      rm -rf $SELF_UPDATE_PATH
      check_exception
      echo "$1 already up to date"
    fi
  else
    echo "$1 runnig"
  fi
}

function defined {
    [[ ${!1-X} == ${!1-Y} ]]
}


function has_value {
    if defined $1; then
        if [[ -n ${!1} ]]; then
            return 0
        fi
    fi
    return 1
}


msg () {

    MESSAGE="$1"
    COLOR="$2"

    if ! has_value COLOR
    then
        COLOR="$DEFAULT"
    fi

    if has_value "MESSAGE"
    then
        $COLOR
        echo "$MESSAGE"
        $DEFAULT
    else
        echo "-- no message received --"
    fi
}


msg_status () {

    MESSAGE="$1"
    STATUS="$2"

    msg "$MESSAGE"
    display_status "$STATUS"
}


display_status () {

    STATUS="$1"

    case $STATUS in

    EMERGENCY )
            STATUS="EMERGENCY"
            COLOR="$RED"
            ;;
    ALERT )
            STATUS="  ALERT  "
            COLOR="$RED"
            ;;
    CRITICAL )
            STATUS="CRITICAL "
            COLOR="$RED"
            ;;
    ERROR )
            STATUS="  ERROR  "
            COLOR="$RED"
            ;;

    WARNING )
            STATUS=" WARNING "
            COLOR="$YELLOW"
            ;;

    NOTICE )
            STATUS=" NOTICE  "
            COLOR="$BLUE"
            ;;
    INFO )
            STATUS="  INFO   "
            COLOR="$LIGHT_BLUE"
            ;;
    DEBUG )
            STATUS="  DEBUG  "
            COLOR="$DEFAULT"
            ;;

    OK  )
            STATUS="   OK    "
            COLOR="$GREEN"
            ;;
    NOT_OK)
            STATUS=" NOT OK  "
            COLOR="$RED"
            ;;

    PASSED )
            STATUS=" PASSED  "
            COLOR="$GREEN"
            ;;

    SUCCESS )
            STATUS=" SUCCESS "
            COLOR="$GREEN"
            ;;

    FAILURE | FAILED )
            STATUS=" FAILED  "
            COLOR="$RED"
            ;;

    *)
            STATUS="UNDEFINED"
            COLOR="$YELLOW"
    esac

    raw_status "$STATUS" "$COLOR"
}

msg_emergency () {

    MESSAGE="$1"
    STATUS="EMERGENCY"
    msg_status "$MESSAGE" "$STATUS"
}

msg_alert () {

    MESSAGE="$1"
    STATUS="ALERT"
    msg_status "$MESSAGE" "$STATUS"
}

msg_critical () {

    MESSAGE="$1"
    STATUS="CRITICAL"
    msg_status "$MESSAGE" "$STATUS"
}

msg_error () {

    MESSAGE="$1"
    STATUS="ERROR"
    msg_status "$MESSAGE" "$STATUS"
}

msg_warning () {

    MESSAGE="$1"
    STATUS="WARNING"
    msg_status "$MESSAGE" "$STATUS"
}

msg_notice () {
    MESSAGE="$1"
    STATUS="NOTICE"
    msg_status "$MESSAGE" "$STATUS"
}

msg_info () {
    MESSAGE="$1"
    STATUS="INFO"
    msg_status "$MESSAGE" "$STATUS"
}

msg_debug () {
    MESSAGE="$1"
    STATUS="DEBUG"
    msg_status "$MESSAGE" "$STATUS"
}

msg_ok () {

    MESSAGE="$1"
    STATUS="OK"
    msg_status "$MESSAGE" "$STATUS"
}

msg_not_ok () {

    MESSAGE="$1"
    STATUS="NOT_OK"
    msg_status "$MESSAGE" "$STATUS"
}

msg_fail () {

    MESSAGE="$1"
    STATUS="FAILED"
    msg_status "$MESSAGE" "$STATUS"
}

msg_success () {
    MESSAGE="$1"
    STATUS="SUCCESS"
    msg_status "$MESSAGE" "$STATUS"
}

msg_passed () {
    MESSAGE="$1"
    STATUS="PASSED"
    msg_status "$MESSAGE" "$STATUS"
}

cmd () {

    COMMAND="$@"
    msg "Executing: $COMMAND"

    RESULT=$($COMMAND 2>&1)
    ERROR="$?"

    MSG=$(echo "Command: ${COMMAND[@]}/") 

    tput cuu1

    if [ "$ERROR" == "0" ]
    then
        msg_ok "$MSG"
#        if [ "$DEBUG" == "1" ]
#        then
            msg "$RESULT"
#        fi
    else
        msg_fail "$MSG"
    fi

    return "$ERROR"
}

raw_status () {

    STATUS="$1"
    COLOR="$2"

    function position_cursor () {

        let RES_COL=`tput cols`-12
        tput cuf $RES_COL
        tput cuu1
    }

    position_cursor
    echo -n "["
    $DEFAULT
    $BOLD
    $COLOR
    echo -n "$STATUS"
    $DEFAULT
    echo "]"
}
