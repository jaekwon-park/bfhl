#!/bin/bash

DEBUG=0
########### Display color
RESULT_RED="tput setaf 1"
RESULT_GREEN="tput setaf 2"
RESULT_YELLOW="tput setaf 3"
RESULT_BLUE="tput setaf 4"
RESULT_CYAN="tput setaf 6"
RESULT_LIGHT_BLUE="$CYAN"
RESULT_BOLD="tput bold"
RESULT_DEFAULT="tput sgr0"
########### Display color END

#######################################
# progress bar
#
# Arguments:
#   excuted commands
# Returns:
#   progressing commands 
# Example:
#   progress_bar "command 1" "command 2" "command 3"
#######################################


CODE_SAVE_CURSOR="\033[s"
CODE_RESTORE_CURSOR="\033[u"
CODE_CURSOR_IN_SCROLL_AREA="\033[1A"
COLOR_FG="\e[30m"
COLOR_BG="\e[42m"
COLOR_BG_BLOCKED="\e[43m"
RESTORE_FG="\e[39m"
RESTORE_BG="\e[49m"

# Variables
PROGRESS_BLOCKED="false"
TRAPPING_ENABLED="false"
ETA_ENABLED="false"
TRAP_SET="false"

CURRENT_NR_LINES=0
PROGRESS_TITLE=""
PROGRESS_TOTAL=100
PROGRESS_START=0
BLOCKED_START=0


# shellcheck disable=SC2120
setup_scroll_area() {
    # If trapping is enabled, we will want to activate it whenever we setup the scroll area and remove it when we break the scroll area
    if [ "$TRAPPING_ENABLED" = "true" ]; then
        trap_on_interrupt
    fi

    # Handle first parameter: alternative progress bar title
    [ -n "$1" ] && PROGRESS_TITLE="$1" || PROGRESS_TITLE="Progress"

    # Handle second parameter : alternative total count
    [ -n "$2" ] && PROGRESS_TOTAL=$2 || PROGRESS_TOTAL=100

    lines=$(tput lines)
    CURRENT_NR_LINES=$lines
    lines=$((lines-1))
    # Scroll down a bit to avoid visual glitch when the screen area shrinks by one row
    echo -en "\n"

    # Save cursor
    echo -en "$CODE_SAVE_CURSOR"
    # Set scroll region (this will place the cursor in the top left)
    echo -en "\033[0;${lines}r"

    # Restore cursor but ensure its inside the scrolling area
    echo -en "$CODE_RESTORE_CURSOR"
    echo -en "$CODE_CURSOR_IN_SCROLL_AREA"

    # Store start timestamp to compute ETA
    if [ "$ETA_ENABLED" = "true" ]; then
      PROGRESS_START=$( date +%s )
    fi

    # Start empty progress bar
    draw_progress_bar 0
}

destroy_scroll_area() {
    lines=$(tput lines)
    # Save cursor
    echo -en "$CODE_SAVE_CURSOR"
    # Set scroll region (this will place the cursor in the top left)
    echo -en "\033[0;${lines}r"

    # Restore cursor but ensure its inside the scrolling area
    echo -en "$CODE_RESTORE_CURSOR"
    echo -en "$CODE_CURSOR_IN_SCROLL_AREA"

    # We are done so clear the scroll bar
    clear_progress_bar

    # Scroll down a bit to avoid visual glitch when the screen area grows by one row
    echo -en "\n\n"

    # Reset title for next usage
    PROGRESS_TITLE=""

    # Once the scroll area is cleared, we want to remove any trap previously set. Otherwise, ctrl+c will exit our shell
    if [ "$TRAP_SET" = "true" ]; then
        trap - EXIT
    fi
}

format_eta() {
    local T=$1
    local D=$((T/60/60/24))
    local H=$((T/60/60%24))
    local M=$((T/60%60))
    local S=$((T%60))
    [ $D -eq 0 -a $H -eq 0 -a $M -eq 0 -a $S -eq 0 ] && echo "--:--:--" && return
    [ $D -gt 0 ] && printf '%d days, ' $D
    printf 'ETA: %d:%02.f:%02.f' $H $M $S
}

draw_progress_bar() {
    eta=""
    if [ "$ETA_ENABLED" = "true" -a $1 -gt 0 ]; then
        if [ "$PROGRESS_BLOCKED" = "true" ]; then
            blocked_duration=$(($(date +%s)-$BLOCKED_START))
            PROGRESS_START=$((PROGRESS_START+blocked_duration))
        fi
        running_time=$(($(date +%s)-PROGRESS_START))
        total_time=$((PROGRESS_TOTAL*running_time/$1))
        eta=$( format_eta $(($total_time-$running_time)) )
    fi

    percentage=$1
    if [ $PROGRESS_TOTAL -ne 100 ]
    then
	[ $PROGRESS_TOTAL -eq 0 ] && percentage=100 || percentage=$((percentage*100/$PROGRESS_TOTAL))
    fi
    extra=$2

    lines=$(tput lines)
    lines=$((lines))

    # Check if the window has been resized. If so, reset the scroll area
    if [ "$lines" -ne "$CURRENT_NR_LINES" ]; then
        setup_scroll_area
    fi

    # Save cursor
    echo -en "$CODE_SAVE_CURSOR"

    # Move cursor position to last row
    echo -en "\033[${lines};0f"

    # Clear progress bar
    tput el

    # Draw progress bar
    PROGRESS_BLOCKED="false"
    print_bar_text $percentage "$extra" "$eta"

    # Restore cursor position
    echo -en "$CODE_RESTORE_CURSOR"
}

block_progress_bar() {
    percentage=$1
    lines=$(tput lines)
    lines=$((lines))
    # Save cursor
    echo -en "$CODE_SAVE_CURSOR"

    # Move cursor position to last row
    echo -en "\033[${lines};0f"

    # Clear progress bar
    tput el

    # Draw progress bar
    PROGRESS_BLOCKED="true"
    BLOCKED_START=$( date +%s )
    print_bar_text $percentage

    # Restore cursor position
    echo -en "$CODE_RESTORE_CURSOR"
}

clear_progress_bar() {
    lines=$(tput lines)
    lines=$((lines))
    # Save cursor
    echo -en "$CODE_SAVE_CURSOR"

    # Move cursor position to last row
    echo -en "\033[${lines};0f"

    # clear progress bar
    tput el

    # Restore cursor position
    echo -en "$CODE_RESTORE_CURSOR"
}

print_bar_text() {
    local percentage=$1
    local extra=$2
    [ -n "$extra" ] && extra=" ($extra)"
    local eta=$3
    if [ -n "$eta" ]; then
        [ -n "$extra" ] && extra="$extra "
        extra="$extra$eta"
    fi
    local cols=$(tput cols)
    bar_size=$((cols-9-${#PROGRESS_TITLE}-${#extra}))

    local color="${COLOR_FG}${COLOR_BG}"
    if [ "$PROGRESS_BLOCKED" = "true" ]; then
        color="${COLOR_FG}${COLOR_BG_BLOCKED}"
    fi

    # Prepare progress bar
    complete_size=$(((bar_size*percentage)/100))
    remainder_size=$((bar_size-complete_size))
    progress_bar=$(echo -ne "["; echo -en "${color}"; printf_new "#" $complete_size; echo -en "${RESTORE_FG}${RESTORE_BG}"; printf_new "." $remainder_size; echo -ne "]");

    # Print progress bar
    echo -ne " $PROGRESS_TITLE ${percentage}% ${progress_bar}${extra}"
}

enable_trapping() {
    TRAPPING_ENABLED="true"
}

trap_on_interrupt() {
    # If this function is called, we setup an interrupt handler to cleanup the progress bar
    TRAP_SET="true"
    trap cleanup_on_interrupt EXIT
}

cleanup_on_interrupt() {
    destroy_scroll_area
    exit
}

printf_new() {
    str=$1
    num=$2
    v=$(printf "%-${num}s" "$str")
    echo -ne "${v// /$str}"
}

# 아래 형태로 호출시 해당 명령어 혹은 함수들 실행하며 실행된 진척도를 ubuntu pakage installer 형태로 출력
# progress_bar "함수" "command" "형태로 호출해서 사용가능"
# Use progress_bar function from inside script
# progress_bar 호출후 destroy_scroll_area 함수 호출하여 화면 하단 영역 삭제 해야함 미호출시 progress bar 가 지저분하게 터미널에 남음

function progress_bar() {

  local CMDS=("${@}")
  local MAX_STEPS=$#

  for step in "${!CMDS[@]}"; do
    perc=$(((step + 1) * 100 / MAX_STEPS))
    ${CMDS[$step]}
    draw_progress_bar $perc
  done
  destroy_scroll_area
}

#######################################
# check current date
#
# Arguments:
#   excuted command
# Returns:
#   current date
# Example:
#   now_date
#######################################
function now_date() {
  date +%Y-%m-%d
}

#######################################
# check current time
#
# Arguments:
#   excuted command
# Returns:
#   current time
# Example:
#   now_time
#######################################
function now_time() {
  date +%H:%M:%S
}

#######################################
# pkg management check
#
# Arguments:
#   excuted command
# Returns:
#   pkg management command
# Example:
#   pkg_check
#######################################
function pkg_check() {
  rpm_path=$(type -p rpm)
	dpkg_path=$(type -p dpkg)

	if [ -e "$rpm_path" ]
	then
		echo "rpm"
	elif [ -e "$dpkg_path" ]
	then
		echo "dpkg"
	else
		cmd::msg_alert "Con't find package"
	fi
}

#######################################
# ip grep
#
# Arguments:
#   excuted command
# Returns:
#   ip address 
# Example:
#   ip_grep "$(ifconfig)"
#######################################
function ip_grep() {
   echo "$@" |  grep -E -o "(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])"
}

#######################################
# ip format check
#
# Arguments:
#   excuted command
# Returns:
#   0(is ip) or 1(is not ip)
# Example:
#  if ip_check 255.255.255.0;  then echo "is ip"; fi 
#######################################
function ip_check() {
  if echo "$1" |  grep -E -o "(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$"; then
    return 0 
  else
    return 1
  fi
}

#######################################
# Exception Check for Every command
#
# Arguments:
#   excuted command
# Returns:
#   None or exit 1
# Example:
#   cd ..
#   check_exception
#######################################
function exception_check () {
# shellcheck disable=SC2181
  if [ "$?" -eq 0 ]; then
    if [[ $DEBUG -eq "0" ]]; then
      echo "done" >/dev/null
    else
      cmd::msg_ok "Exception Check ok"
    fi
  else
    cmd::msg_error "Exception Check Fail. Above task return code [ $? ]"
    exit 1
  fi
}

#######################################
# Self Update function
#   Download Program from git repository and check hash result then change file
#
# Arguments:
#   $1 check process name
#   $2 Original program path
#   $3 DownLoad URL
# Returns:
#   None
#
#######################################
function self_update () {
  local SELF_UPDATE_PATH="/tmp/self_update"
  local ORIGNAL_PROGRAM_PATH=$2
  local DOWNLOAD_URL=$3
  if [[ "$(pgrep -f "$1" | wc -l)" -eq 0 ]]; then
    curl -w ' [:: %{size_download} byte has been downloaded ::]\n' -L -# "$DOWNLOAD_URL"?"$(date +%s)" -o $SELF_UPDATE_PATH
    check_exception
    if [ "$(md5sum $SELF_UPDATE_PATH | awk '{print $1}')" != "$(md5sum "$ORIGNAL_PROGRAM_PATH" | awk '{print $1}')" ]; then
      chmod +x $SELF_UPDATE_PATH
      check_exception
      mv -f $SELF_UPDATE_PATH "$ORIGNAL_PROGRAM_PATH"
      check_exception
      cmd::msg_success "update done"
    else
      rm -rf $SELF_UPDATE_PATH
      check_exception
      cmd::msg_info "$1 already up to date"
    fi
  else
    cmd::msg_info "$1 runnig"
  fi
}

function cmd::defined() {
  [[ ${!1-X} == "${!1-Y}" ]]
}

function cmd::has_value() {
  if cmd::defined "$1"; then
    if [[ -n ${!1} ]]; then
      return 0
    fi
  fi
  return 1
}

function cmd::msg() {
  local MESSAGE="$1"
  local COLOR="$2"

  if ! cmd::has_value COLOR; then
    COLOR="$RESULT_DEFAULT"
  fi

  if cmd::has_value "MESSAGE"; then
    $COLOR
    echo "$MESSAGE"
    $RESULT_DEFAULT
  else
    echo "-- no message received --"
  fi
}

function cmd::msg_status() {
  local MESSAGE="$1"
  local STATUS="$2"

  cmd::msg "$MESSAGE"
  cmd::display_status "$STATUS"
}

function cmd::display_status() {
  local STATUS="$1"

  case $STATUS in
    EMERGENCY)
      STATUS="EMERGENCY"
      COLOR="$RESULT_RED"
      ;;
    ALERT)
      STATUS="  ALERT  "
      COLOR="$RESULT_RED"
      ;;
    CRITICAL)
      STATUS="CRITICAL "
      COLOR="$RESULT_RED"
      ;;
    ERROR)
      STATUS="  ERROR  "
      COLOR="$RESULT_RED"
      ;;
    WARNING)
      STATUS=" WARNING "
      COLOR="$RESULT_YELLOW"
      ;;
    NOTICE)
      STATUS=" NOTICE  "
      COLOR="$RESULT_BLUE"
      ;;
    INFO)
      STATUS="  INFO   "
      COLOR="$RESULT_LIGHT_BLUE"
      ;;
    DEBUG)
      STATUS="  DEBUG  "
      COLOR="$RESULT_DEFAULT"
      ;;
    OK)
      STATUS="   OK    "
      COLOR="$RESULT_GREEN"
      ;;
    NOT_OK)
      STATUS=" NOT OK  "
      COLOR="$RESULT_RED"
      ;;
    PASSED)
      STATUS=" PASSED  "
      COLOR="$RESULT_GREEN"
      ;;
    SUCCESS)
      STATUS=" SUCCESS "
      COLOR="$RESULT_GREEN"
      ;;
    FAILURE | FAILED)
      STATUS=" FAILED  "
      COLOR="$RESULT_RED"
      ;;
    *)
      STATUS="UNDEFINED"
      COLOR="$RESULT_YELLOW"
      ;;
  esac

  cmd::raw_status "$STATUS" "$COLOR"
}

function cmd::msg_emergency() {
  local MESSAGE="$1"
  local STATUS="EMERGENCY"
  cmd::msg_status "$MESSAGE" "$STATUS"
}

function cmd::msg_alert() {
  local MESSAGE="$1"
  local STATUS="ALERT"
  cmd::msg_status "$MESSAGE" "$STATUS"
}

function cmd::msg_critical() {
  local MESSAGE="$1"
  local STATUS="CRITICAL"
  cmd::msg_status "$MESSAGE" "$STATUS"
}

function cmd::msg_error() {
  local MESSAGE="$1"
  local STATUS="ERROR"
  cmd::msg_status "$MESSAGE" "$STATUS"
}

function cmd::msg_warning() {
  local MESSAGE="$1"
  local STATUS="WARNING"
  cmd::msg_status "$MESSAGE" "$STATUS"
}

function cmd::msg_notice() {
  local MESSAGE="$1"
  local STATUS="NOTICE"
  cmd::msg_status "$MESSAGE" "$STATUS"
}

function cmd::msg_info() {
  local MESSAGE="$1"
  local STATUS="INFO"
  cmd::msg_status "$MESSAGE" "$STATUS"
}

function cmd::msg_debug() {
  local MESSAGE="$1"
  local STATUS="DEBUG"
  cmd::msg_status "$MESSAGE" "$STATUS"
}

function cmd::msg_ok() {
  local MESSAGE="$1"
  local STATUS="OK"
  cmd::msg_status "$MESSAGE" "$STATUS"
}

function cmd::msg_not_ok() {
  local MESSAGE="$1"
  local STATUS="NOT_OK"
  cmd::msg_status "$MESSAGE" "$STATUS"
}

function cmd::msg_fail() {
  local MESSAGE="$1"
  local STATUS="FAILED"
  cmd::msg_status "$MESSAGE" "$STATUS"
}

function cmd::msg_success() {
  local MESSAGE="$1"
  local STATUS="SUCCESS"
  cmd::msg_status "$MESSAGE" "$STATUS"
}

function cmd::msg_passed() {
  local MESSAGE="$1"
  local STATUS="PASSED"
  cmd::msg_status "$MESSAGE" "$STATUS"
}

function cmd() {
  local COMMAND=("$@")
  cmd::msg "Executing: $*"

  RESULT=$("${COMMAND[@]}" 2>&1)
  local ERROR="$?"
  local MSG="[COMMAND]  $*"

  tput cuu1

  if [ "$ERROR" == "0" ]; then
    cmd::msg_ok "$MSG"
    if [ "$DEBUG" == "1" ]; then
      cmd::msg "$RESULT"
    fi
  else
    cmd::msg_fail "$MSG"
  fi

  return "$ERROR"
}

function cmd:position_cursor() {
  let RES_COL="$(tput cols)-12"
  tput cuf "$RES_COL"
  tput cuu1
}

function cmd::raw_status() {
  STATUS="$1"
  COLOR="$2"
  cmd:position_cursor
  echo -n "["
  $RESULT_DEFAULT
  $BOLD
  $COLOR
  echo -n "$STATUS"
  $RESULT_DEFAULT
  echo "]"
}
